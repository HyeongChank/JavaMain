package DataStructure_Linkedlist;

import java.util.LinkedList;

//public class Comparetolink {
//
//	public static void main(String[] args) {
//		LinkedList<String> list = new LinkedList<String>();
//		list.addFirst("검은");
//		list.addFirst("흰");
//		list.add("가");
//		list.add("나");
//		list.add("다");
//		list.add("라");
//		list.add("마");
//		list.pollFirst();
//
//		System.out.println(list);

		public class Comparetolink {
			int size = 0;
			Node first;
			Node last;
			public Comparetolink() {
			}
			public LinkedList(){
				this();
				addAll(c);
			}

	
			private void linkFirst(e) {
				
				final Node f = first;
				final Node newNode = new Node<>(null, e, f);
				first = newNode;
				if (f == null)
					last = newNode;
				else
					f.prev = newNode;
				size++;
				modCount++;
			}
	
			void linkLast(e) {
				final Node l = last;
				final Node newNode = new Node<>(l, e, null);
				last = newNode;
				if (l == null)
					first = newNode;
				else
					l.next = newNode;
				size++;
				modCount++;
			}

			/**
			 * Inserts element e before non-null Node succ.
			 */
			void linkBefore(E e, Node<E> succ) {
				// assert succ != null;
				final Node<E> pred = succ.prev;
				final Node<E> newNode = new Node<>(pred, e, succ);
				succ.prev = newNode;
				if (pred == null)
					first = newNode;
				else
					pred.next = newNode;
				size++;
				modCount++;
			}

			/**
			 * Unlinks non-null first node f.
			 */
			private E unlinkFirst(Node<E> f) {
				// assert f == first && f != null;
				final E element = f.item;
				final Node<E> next = f.next;
				f.item = null;
				f.next = null; // help GC
				first = next;
				if (next == null)
					last = null;
				else
					next.prev = null;
				size--;
				modCount++;
				return element;
			}

			/**
			 * Unlinks non-null last node l.
			 */
			private E unlinkLast(Node<E> l) {
				// assert l == last && l != null;
				final E element = l.item;
				final Node<E> prev = l.prev;
				l.item = null;
				l.prev = null; // help GC
				last = prev;
				if (prev == null)
					first = null;
				else
					prev.next = null;
				size--;
				modCount++;
				return element;
			}

			/**
			 * Unlinks non-null node x.
			 */
			E unlink(Node<E> x) {
				// assert x != null;
				final E element = x.item;
				final Node<E> next = x.next;
				final Node<E> prev = x.prev;

				if (prev == null) {
					first = next;
				} else {
					prev.next = next;
					x.prev = null;
				}

				if (next == null) {
					last = prev;
				} else {
					next.prev = prev;
					x.next = null;
				}

				x.item = null;
				size--;
				modCount++;
				return element;
			}

			/**
			 * Returns the first element in this list.
			 *
			 * @return the first element in this list
			 * @throws NoSuchElementException if this list is empty
			 */
			public E getFirst() {
				final Node<E> f = first;
				if (f == null)
					throw new NoSuchElementException();
				return f.item;
			}

			/**
			 * Returns the last element in this list.
			 *
			 * @return the last element in this list
			 * @throws NoSuchElementException if this list is empty
			 */
			public E getLast() {
				final Node<E> l = last;
				if (l == null)
					throw new NoSuchElementException();
				return l.item;
			}

			/**
			 * Removes and returns the first element from this list.
			 *
			 * @return the first element from this list
			 * @throws NoSuchElementException if this list is empty
			 */
			public E removeFirst() {
				final Node<E> f = first;
				if (f == null)
					throw new NoSuchElementException();
				return unlinkFirst(f);
			}

			/**
			 * Removes and returns the last element from this list.
			 *
			 * @return the last element from this list
			 * @throws NoSuchElementException if this list is empty
			 */
			public E removeLast() {
				final Node<E> l = last;
				if (l == null)
					throw new NoSuchElementException();
				return unlinkLast(l);
			}

			/**
			 * Inserts the specified element at the beginning of this list.
			 *
			 * @param e the element to add
			 */
			public void addFirst(E e) {
				linkFirst(e);
			}

			/**
			 * Appends the specified element to the end of this list.
			 *
			 * <p>
			 * This method is equivalent to {@link #add}.
			 *
			 * @param e the element to add
			 */
			public void addLast(E e) {
				linkLast(e);
			}

			/**
			 * Returns {@code true} if this list contains the specified element. More
			 * formally, returns {@code true} if and only if this list contains at least one
			 * element {@code e} such that {@code Objects.equals(o, e)}.
			 *
			 * @param o element whose presence in this list is to be tested
			 * @return {@code true} if this list contains the specified element
			 */
			public boolean contains(Object o) {
				return indexOf(o) >= 0;
			}

			/**
			 * Returns the number of elements in this list.
			 *
			 * @return the number of elements in this list
			 */
			public int size() {
				return size;
			}

			/**
			 * Appends the specified element to the end of this list.
			 *
			 * <p>
			 * This method is equivalent to {@link #addLast}.
			 *
			 * @param e element to be appended to this list
			 * @return {@code true} (as specified by {@link Collection#add})
			 */
			public boolean add(E e) {
				linkLast(e);
				return true;
			}

			/**
			 * Removes the first occurrence of the specified element from this list, if it
			 * is present. If this list does not contain the element, it is unchanged. More
			 * formally, removes the element with the lowest index {@code i} such that
			 * {@code Objects.equals(o, get(i))} (if such an element exists). Returns
			 * {@code true} if this list contained the specified element (or equivalently,
			 * if this list changed as a result of the call).
			 *
			 * @param o element to be removed from this list, if present
			 * @return {@code true} if this list contained the specified element
			 */
			public boolean remove(Object o) {
				if (o == null) {
					for (Node<E> x = first; x != null; x = x.next) {
						if (x.item == null) {
							unlink(x);
							return true;
						}
					}
				} else {
					for (Node<E> x = first; x != null; x = x.next) {
						if (o.equals(x.item)) {
							unlink(x);
							return true;
						}
					}
				}
				return false;
			}

			/**
			 * Appends all of the elements in the specified collection to the end of this
			 * list, in the order that they are returned by the specified collection's
			 * iterator. The behavior of this operation is undefined if the specified
			 * collection is modified while the operation is in progress. (Note that this
			 * will occur if the specified collection is this list, and it's nonempty.)
			 *
			 * @param c collection containing elements to be added to this list
			 * @return {@code true} if this list changed as a result of the call
			 * @throws NullPointerException if the specified collection is null
			 */
			public boolean addAll(Collection<? extends E> c) {
				return addAll(size, c);
			}

			/**
			 * Inserts all of the elements in the specified collection into this list,
			 * starting at the specified position. Shifts the element currently at that
			 * position (if any) and any subsequent elements to the right (increases their
			 * indices). The new elements will appear in the list in the order that they are
			 * returned by the specified collection's iterator.
			 *
			 * @param index index at which to insert the first element from the specified
			 *              collection
			 * @param c     collection containing elements to be added to this list
			 * @return {@code true} if this list changed as a result of the call
			 * @throws IndexOutOfBoundsException {@inheritDoc}
			 * @throws NullPointerException      if the specified collection is null
			 */
			public boolean addAll(int index, Collection<? extends E> c) {
				checkPositionIndex(index);

				Object[] a = c.toArray();
				int numNew = a.length;
				if (numNew == 0)
					return false;

				Node<E> pred, succ;
				if (index == size) {
					succ = null;
					pred = last;
				} else {
					succ = node(index);
					pred = succ.prev;
				}

				for (Object o : a) {
					@SuppressWarnings("unchecked")
					E e = (E) o;
					Node<E> newNode = new Node<>(pred, e, null);
					if (pred == null)
						first = newNode;
					else
						pred.next = newNode;
					pred = newNode;
				}

				if (succ == null) {
					last = pred;
				} else {
					pred.next = succ;
					succ.prev = pred;
				}

				size += numNew;
				modCount++;
				return true;
			}

			/**
			 * Removes all of the elements from this list. The list will be empty after this
			 * call returns.
			 */
			public void clear() {
				// Clearing all of the links between nodes is "unnecessary", but:
				// - helps a generational GC if the discarded nodes inhabit
				// more than one generation
				// - is sure to free memory even if there is a reachable Iterator
				for (Node<E> x = first; x != null;) {
					Node<E> next = x.next;
					x.item = null;
					x.next = null;
					x.prev = null;
					x = next;
				}
				first = last = null;
				size = 0;
				modCount++;
			}

			// Positional Access Operations

			/**
			 * Returns the element at the specified position in this list.
			 *
			 * @param index index of the element to return
			 * @return the element at the specified position in this list
			 * @throws IndexOutOfBoundsException {@inheritDoc}
			 */
			public E get(int index) {
				checkElementIndex(index);
				return node(index).item;
			}

			/**
			 * Replaces the element at the specified position in this list with the
			 * specified element.
			 *
			 * @param index   index of the element to replace
			 * @param element element to be stored at the specified position
			 * @return the element previously at the specified position
			 * @throws IndexOutOfBoundsException {@inheritDoc}
			 */
			public E set(int index, E element) {
				checkElementIndex(index);
				Node<E> x = node(index);
				E oldVal = x.item;
				x.item = element;
				return oldVal;
			}

			/**
			 * Inserts the specified element at the specified position in this list. Shifts
			 * the element currently at that position (if any) and any subsequent elements
			 * to the right (adds one to their indices).
			 *
			 * @param index   index at which the specified element is to be inserted
			 * @param element element to be inserted
			 * @throws IndexOutOfBoundsException {@inheritDoc}
			 */
			public void add(int index, E element) {
				checkPositionIndex(index);

				if (index == size)
					linkLast(element);
				else
					linkBefore(element, node(index));
			}

			/**
			 * Removes the element at the specified position in this list. Shifts any
			 * subsequent elements to the left (subtracts one from their indices). Returns
			 * the element that was removed from the list.
			 *
			 * @param index the index of the element to be removed
			 * @return the element previously at the specified position
			 * @throws IndexOutOfBoundsException {@inheritDoc}
			 */
			public E remove(int index) {
				checkElementIndex(index);
				return unlink(node(index));
			}

			/**
			 * Tells if the argument is the index of an existing element.
			 */
			private boolean isElementIndex(int index) {
				return index >= 0 && index < size;
			}

			/**
			 * Tells if the argument is the index of a valid position for an iterator or an
			 * add operation.
			 */
			private boolean isPositionIndex(int index) {
				return index >= 0 && index <= size;
			}

			/**
			 * Constructs an IndexOutOfBoundsException detail message. Of the many possible
			 * refactorings of the error handling code, this "outlining" performs best with
			 * both server and client VMs.
			 */
			private String outOfBoundsMsg(int index) {
				return "Index: " + index + ", Size: " + size;
			}

			private void checkElementIndex(int index) {
				if (!isElementIndex(index))
					throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
			}

			private void checkPositionIndex(int index) {
				if (!isPositionIndex(index))
					throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
			}

			/**
			 * Returns the (non-null) Node at the specified element index.
			 */
			Node<E> node(int index) {
				// assert isElementIndex(index);

				if (index < (size >> 1)) {
					Node<E> x = first;
					for (int i = 0; i < index; i++)
						x = x.next;
					return x;
				} else {
					Node<E> x = last;
					for (int i = size - 1; i > index; i--)
						x = x.prev;
					return x;
				}
			}

			// Search Operations

			/**
			 * Returns the index of the first occurrence of the specified element in this
			 * list, or -1 if this list does not contain the element. More formally, returns
			 * the lowest index {@code i} such that {@code Objects.equals(o, get(i))}, or -1
			 * if there is no such index.
			 *
			 * @param o element to search for
			 * @return the index of the first occurrence of the specified element in this
			 *         list, or -1 if this list does not contain the element
			 */
			public int indexOf(Object o) {
				int index = 0;
				if (o == null) {
					for (Node<E> x = first; x != null; x = x.next) {
						if (x.item == null)
							return index;
						index++;
					}
				} else {
					for (Node<E> x = first; x != null; x = x.next) {
						if (o.equals(x.item))
							return index;
						index++;
					}
				}
				return -1;
			}

			/**
			 * Returns the index of the last occurrence of the specified element in this
			 * list, or -1 if this list does not contain the element. More formally, returns
			 * the highest index {@code i} such that {@code Objects.equals(o, get(i))}, or
			 * -1 if there is no such index.
			 *
			 * @param o element to search for
			 * @return the index of the last occurrence of the specified element in this
			 *         list, or -1 if this list does not contain the element
			 */
			public int lastIndexOf(Object o) {
				int index = size;
				if (o == null) {
					for (Node<E> x = last; x != null; x = x.prev) {
						index--;
						if (x.item == null)
							return index;
					}
				} else {
					for (Node<E> x = last; x != null; x = x.prev) {
						index--;
						if (o.equals(x.item))
							return index;
					}
				}
				return -1;
			}

			// Queue operations.

			/**
			 * Retrieves, but does not remove, the head (first element) of this list.
			 *
			 * @return the head of this list, or {@code null} if this list is empty
			 * @since 1.5
			 */
			public E peek() {
				final Node<E> f = first;
				return (f == null) ? null : f.item;
			}

			/**
			 * Retrieves, but does not remove, the head (first element) of this list.
			 *
			 * @return the head of this list
			 * @throws NoSuchElementException if this list is empty
			 * @since 1.5
			 */
			public E element() {
				return getFirst();
			}

			/**
			 * Retrieves and removes the head (first element) of this list.
			 *
			 * @return the head of this list, or {@code null} if this list is empty
			 * @since 1.5
			 */
			public E poll() {
				final Node<E> f = first;
				return (f == null) ? null : unlinkFirst(f);
			}

			/**
			 * Retrieves and removes the head (first element) of this list.
			 *
			 * @return the head of this list
			 * @throws NoSuchElementException if this list is empty
			 * @since 1.5
			 */
			public E remove() {
				return removeFirst();
			}

			/**
			 * Adds the specified element as the tail (last element) of this list.
			 *
			 * @param e the element to add
			 * @return {@code true} (as specified by {@link Queue#offer})
			 * @since 1.5
			 */
			public boolean offer(E e) {
				return add(e);
			}

			// Deque operations
			/**
			 * Inserts the specified element at the front of this list.
			 *
			 * @param e the element to insert
			 * @return {@code true} (as specified by {@link Deque#offerFirst})
			 * @since 1.6
			 */
			public boolean offerFirst(E e) {
				addFirst(e);
				return true;
			}

			/**
			 * Inserts the specified element at the end of this list.
			 *
			 * @param e the element to insert
			 * @return {@code true} (as specified by {@link Deque#offerLast})
			 * @since 1.6
			 */
			public boolean offerLast(E e) {
				addLast(e);
				return true;
			}

			/**
			 * Retrieves, but does not remove, the first element of this list, or returns
			 * {@code null} if this list is empty.
			 *
			 * @return the first element of this list, or {@code null} if this list is empty
			 * @since 1.6
			 */
			public E peekFirst() {
				final Node<E> f = first;
				return (f == null) ? null : f.item;
			}

			/**
			 * Retrieves, but does not remove, the last element of this list, or returns
			 * {@code null} if this list is empty.
			 *
			 * @return the last element of this list, or {@code null} if this list is empty
			 * @since 1.6
			 */
			public E peekLast() {
				final Node<E> l = last;
				return (l == null) ? null : l.item;
			}

			/**
			 * Retrieves and removes the first element of this list, or returns {@code null}
			 * if this list is empty.
			 *
			 * @return the first element of this list, or {@code null} if this list is empty
			 * @since 1.6
			 */
			public E pollFirst() {
				final Node<E> f = first;
				return (f == null) ? null : unlinkFirst(f);
			}

			/**
			 * Retrieves and removes the last element of this list, or returns {@code null}
			 * if this list is empty.
			 *
			 * @return the last element of this list, or {@code null} if this list is empty
			 * @since 1.6
			 */
			public E pollLast() {
				final Node<E> l = last;
				return (l == null) ? null : unlinkLast(l);
			}

			/**
			 * Pushes an element onto the stack represented by this list. In other words,
			 * inserts the element at the front of this list.
			 *
			 * <p>
			 * This method is equivalent to {@link #addFirst}.
			 *
			 * @param e the element to push
			 * @since 1.6
			 */
			public void push(E e) {
				addFirst(e);
			}

			/**
			 * Pops an element from the stack represented by this list. In other words,
			 * removes and returns the first element of this list.
			 *
			 * <p>
			 * This method is equivalent to {@link #removeFirst()}.
			 *
			 * @return the element at the front of this list (which is the top of the stack
			 *         represented by this list)
			 * @throws NoSuchElementException if this list is empty
			 * @since 1.6
			 */
			public E pop() {
				return removeFirst();
			}

			/**
			 * Removes the first occurrence of the specified element in this list (when
			 * traversing the list from head to tail). If the list does not contain the
			 * element, it is unchanged.
			 *
			 * @param o element to be removed from this list, if present
			 * @return {@code true} if the list contained the specified element
			 * @since 1.6
			 */
			public boolean removeFirstOccurrence(Object o) {
				return remove(o);
			}

			/**
			 * Removes the last occurrence of the specified element in this list (when
			 * traversing the list from head to tail). If the list does not contain the
			 * element, it is unchanged.
			 *
			 * @param o element to be removed from this list, if present
			 * @return {@code true} if the list contained the specified element
			 * @since 1.6
			 */
			public boolean removeLastOccurrence(Object o) {
				if (o == null) {
					for (Node<E> x = last; x != null; x = x.prev) {
						if (x.item == null) {
							unlink(x);
							return true;
						}
					}
				} else {
					for (Node<E> x = last; x != null; x = x.prev) {
						if (o.equals(x.item)) {
							unlink(x);
							return true;
						}
					}
				}
				return false;
			}


		
	}

}
